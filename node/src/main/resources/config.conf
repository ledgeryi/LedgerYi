# The type of network is configured here.
# The network type is divided into permissioned blockchain (1) and public blockchain (2).
net {
  type = 1
  # type = 2
}

storage {
  # Directory for storing persistent data
  db.version = 2,
  db.engine = "ROCKSDB",
  db.directory = "database",
  index.directory = "index",
  # transHistory.switch = "on"

  //db settings is needed when using rocksDB as the storage implement (db.version=2 and db.engine="ROCKSDB").
  //we'd strongly recommend that do not modify it unless you know every item's meaning clearly.
  //dbSettings = {
  //  levelNumber = 7
  //  //compactThreads = 32
  //  blockSize = 64  // n * KB
  //  maxBytesForLevelBase = 256  // n * MB
  //  maxBytesForLevelMultiplier = 10
  //  level0FileNumCompactionTrigger = 4
  //  targetFileSizeBase = 256  // n * MB
  //  targetFileSizeMultiplier = 1
  //}
}

node.discovery = {
  enable = true
  persist = true
  bind.ip = ""
  external.ip = null
}

node.backup {
  # udp listen port, each member should have the save configuration
  port = 10001
  # my priority, each member should use different priority
  priority = 8
  # time interval to send keepAlive message, each member should have the save configuration
  keepAliveInterval = 3000
  # peer's ip list, can't contain mine
  members = [
    # "ip",
    # "ip"
  ]
}

crypto {
  #engine = "ecc"
  engine = "sm2"
}

node {
  listen.port = 6666
  # second
  connection.timeout = 2
  tcpNettyWorkThreadNum = 0
  udpNettyWorkThreadNum = 1
  # Number of validate sign thread, default availableProcessors / 2
  # validateSignThreadNum = 16
  connectFactor = 0.3
  activeConnectFactor = 0.1
  maxActiveNodes = 30
  maxActiveNodesWithSameIp = 10
  minParticipationRate = 0
  disconnectNumberFactor = 0.4
  maxConnectNumberFactor = 0.8
  receiveTcpMinDataLength = 2048
  isOpenFullTcpDisconnect = true

  # Active establish connection in any case
  # "ip:port",
  # "ip:port"
  active = [
    #"127.0.0.1:6667"
  ]

  # Passive accept connection in any case
  # "ip:port",
  # "ip:port"
  passive = [
  ]

  # "ip:port",
  # "ip:port"
  fastForward = [
  ]

  http {
    ledgerYiNodeEnable = true
    ledgerYiNodePort = 8090
  }

  rpc {
    port = 50051
    # Connection being idle for longer than which will be gracefully terminated
    maxConnectionIdleInMillis = 60000
    # Transactions can only be broadcast if the number of effective connections is reached.
    minEffectiveConnection = 0
  }
}

# List of the seed nodes, Seed nodes are stable nodes
# ip.list = [
#   "ip:port",
#   "ip:port"
# ]
seed.node = {
  ip.list = [
    #"127.0.0.1:6667"
  ]
}

genesis.block = {

  masters = [
    {
      address: ada95a8734256b797efcd862e0b208529283ac56
    }
    #,
    #{
    #  address: a8f2ae95ddfce56a57c92c8e26b77fbadbf70800
    #}
  ]

  timestamp = "1602816381000" #2020-10-16 10:46:21
  parentHash = "0x0000000000000000000000000000000000000000000000000000000000000000"
}

#local Master's address
localMasterAccountAddress = ada95a8734256b797efcd862e0b208529283ac56

#local Master's private key
localMaster = [
  e8b5177d5a69898dcc437d0e96a9343a37bac001cb9bec7a90b660eee66b4587
]

block = {
  # the first master should set false, others set true.
  needSyncCheck = false
}

# Transaction reference block, default is "head", configure to "solid" can avoid TaPos error
tx.reference.block = "head"